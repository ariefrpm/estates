// Code generated by MockGen. DO NOT EDIT.
// Source: core/interfaces/estate_interface.go
//
// Generated by this command:
//
//	mockgen -source=core/interfaces/estate_interface.go -destination=core/interfaces/estate_interface_mock.go -package=interfaces
//

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	domain "github.com/SawitProRecruitment/EstateService/core/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEstateUsecase is a mock of EstateUsecase interface.
type MockEstateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEstateUsecaseMockRecorder
}

// MockEstateUsecaseMockRecorder is the mock recorder for MockEstateUsecase.
type MockEstateUsecaseMockRecorder struct {
	mock *MockEstateUsecase
}

// NewMockEstateUsecase creates a new mock instance.
func NewMockEstateUsecase(ctrl *gomock.Controller) *MockEstateUsecase {
	mock := &MockEstateUsecase{ctrl: ctrl}
	mock.recorder = &MockEstateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstateUsecase) EXPECT() *MockEstateUsecaseMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockEstateUsecase) CreateEstate(ctx context.Context, width, length int) (*domain.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, width, length)
	ret0, _ := ret[0].(*domain.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockEstateUsecaseMockRecorder) CreateEstate(ctx, width, length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockEstateUsecase)(nil).CreateEstate), ctx, width, length)
}

// CreateTree mocks base method.
func (m *MockEstateUsecase) CreateTree(ctx context.Context, estateID uuid.UUID, plot domain.Plot, height int) (*domain.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, estateID, plot, height)
	ret0, _ := ret[0].(*domain.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockEstateUsecaseMockRecorder) CreateTree(ctx, estateID, plot, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockEstateUsecase)(nil).CreateTree), ctx, estateID, plot, height)
}

// GetDroneDistance mocks base method.
func (m *MockEstateUsecase) GetDroneDistance(ctx context.Context, estateID uuid.UUID, maxDistance *int) (*domain.DroneDistance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDroneDistance", ctx, estateID, maxDistance)
	ret0, _ := ret[0].(*domain.DroneDistance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDroneDistance indicates an expected call of GetDroneDistance.
func (mr *MockEstateUsecaseMockRecorder) GetDroneDistance(ctx, estateID, maxDistance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDroneDistance", reflect.TypeOf((*MockEstateUsecase)(nil).GetDroneDistance), ctx, estateID, maxDistance)
}

// GetEstateStats mocks base method.
func (m *MockEstateUsecase) GetEstateStats(ctx context.Context, estateID uuid.UUID) (*domain.EstateStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateStats", ctx, estateID)
	ret0, _ := ret[0].(*domain.EstateStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateStats indicates an expected call of GetEstateStats.
func (mr *MockEstateUsecaseMockRecorder) GetEstateStats(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateStats", reflect.TypeOf((*MockEstateUsecase)(nil).GetEstateStats), ctx, estateID)
}

// MockEstateRepository is a mock of EstateRepository interface.
type MockEstateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEstateRepositoryMockRecorder
}

// MockEstateRepositoryMockRecorder is the mock recorder for MockEstateRepository.
type MockEstateRepositoryMockRecorder struct {
	mock *MockEstateRepository
}

// NewMockEstateRepository creates a new mock instance.
func NewMockEstateRepository(ctrl *gomock.Controller) *MockEstateRepository {
	mock := &MockEstateRepository{ctrl: ctrl}
	mock.recorder = &MockEstateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstateRepository) EXPECT() *MockEstateRepositoryMockRecorder {
	return m.recorder
}

// CreateEstateAndDroneRoute mocks base method.
func (m *MockEstateRepository) CreateEstateAndDroneRoute(ctx context.Context, estate *domain.Estate, droneRoutes []domain.DroneRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstateAndDroneRoute", ctx, estate, droneRoutes)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstateAndDroneRoute indicates an expected call of CreateEstateAndDroneRoute.
func (mr *MockEstateRepositoryMockRecorder) CreateEstateAndDroneRoute(ctx, estate, droneRoutes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstateAndDroneRoute", reflect.TypeOf((*MockEstateRepository)(nil).CreateEstateAndDroneRoute), ctx, estate, droneRoutes)
}

// CreateTreeAndUpdateDroneRoute mocks base method.
func (m *MockEstateRepository) CreateTreeAndUpdateDroneRoute(ctx context.Context, estateID uuid.UUID, droneRouteAltitude int, tree *domain.Tree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTreeAndUpdateDroneRoute", ctx, estateID, droneRouteAltitude, tree)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTreeAndUpdateDroneRoute indicates an expected call of CreateTreeAndUpdateDroneRoute.
func (mr *MockEstateRepositoryMockRecorder) CreateTreeAndUpdateDroneRoute(ctx, estateID, droneRouteAltitude, tree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTreeAndUpdateDroneRoute", reflect.TypeOf((*MockEstateRepository)(nil).CreateTreeAndUpdateDroneRoute), ctx, estateID, droneRouteAltitude, tree)
}

// GetDroneRoutes mocks base method.
func (m *MockEstateRepository) GetDroneRoutes(ctx context.Context, estateID uuid.UUID) ([]domain.DroneRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDroneRoutes", ctx, estateID)
	ret0, _ := ret[0].([]domain.DroneRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDroneRoutes indicates an expected call of GetDroneRoutes.
func (mr *MockEstateRepositoryMockRecorder) GetDroneRoutes(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDroneRoutes", reflect.TypeOf((*MockEstateRepository)(nil).GetDroneRoutes), ctx, estateID)
}

// GetEstateAndStats mocks base method.
func (m *MockEstateRepository) GetEstateAndStats(ctx context.Context, estateID uuid.UUID) (*domain.Estate, *domain.EstateStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateAndStats", ctx, estateID)
	ret0, _ := ret[0].(*domain.Estate)
	ret1, _ := ret[1].(*domain.EstateStats)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEstateAndStats indicates an expected call of GetEstateAndStats.
func (mr *MockEstateRepositoryMockRecorder) GetEstateAndStats(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateAndStats", reflect.TypeOf((*MockEstateRepository)(nil).GetEstateAndStats), ctx, estateID)
}

// GetEstateAndTree mocks base method.
func (m *MockEstateRepository) GetEstateAndTree(ctx context.Context, estateID uuid.UUID, plot domain.Plot) (*domain.Estate, *domain.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateAndTree", ctx, estateID, plot)
	ret0, _ := ret[0].(*domain.Estate)
	ret1, _ := ret[1].(*domain.Tree)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEstateAndTree indicates an expected call of GetEstateAndTree.
func (mr *MockEstateRepositoryMockRecorder) GetEstateAndTree(ctx, estateID, plot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateAndTree", reflect.TypeOf((*MockEstateRepository)(nil).GetEstateAndTree), ctx, estateID, plot)
}
